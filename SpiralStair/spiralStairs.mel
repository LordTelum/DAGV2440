// Function for spiral stairs
proc GenerateStaircase(int $numStairs, float $stairLength, float $stairWidth, float $stairHeight, float $pivotOffset, float $stepHeight, float $stepRotation) {
    // Set initial position and rotation values
    float $initialPosX = 0.0;
    float $initialPosY = 0.0;
    float $initialPosZ = 0.0;
    float $initialRotX = 0.0;
    float $initialRotY = 90.0;
    float $initialRotZ = 0.0;

    // Loop through each step
    for ($i = 0; $i < $numStairs; $i++) {
        // Create a cube for the step
        string $cube[] = `polyCube -w $stairWidth -h $stairHeight -d $stairLength`;
        
        // Get the angle for the current step
        float $angle = $i * ($stepRotation * (3.14 / 180.0));
        
        // Get the position for the step
        float $posX = $pivotOffset * cos($angle);
        float $posZ = $pivotOffset * sin($angle);
        float $posY = $i * $stepHeight;
        
        // Move the cube to the calculated position
        move ($initialPosX + $posX) ($initialPosY + $posY) ($initialPosZ + $posZ) $cube[0];
        
        // Rotate the cube to the calculated rotation
        rotate -r -os $initialRotX ($initialRotY + ($i * -25)) $initialRotZ $cube[0];
    }
}

// Call the function
GenerateStaircase(40, 8, 3, .5, -6, 4, 25);
